{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server for registration.",
        "version": "1.0.0",
        "title": "Registration API"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "schemes": [
        "http"
    ],
    "tags": [
        {
            "name": "Users",
            "description": "Operations related to users"
        },
        {
            "name": "Affiliates",
            "description": "Operations related to affiliates"
        },
        {
            "name": "Agents",
            "description": "Operations related to agents"
        }
    ],
    "paths": {
        "/v1/public/clients/registration": {
            "post": {
                "tags": ["Clients"],
                "summary": "Register a new client",
                "description": "This endpoint registers a new client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "client",
                        "description": "Client object that needs to be registered",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client registered successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/v1/public/clients": {
            "get": {
                "tags": ["Clients"],
                "summary": "Get all clients",
                "description": "Returns a list of all clients with full data",
                "responses": {
                    "200": {
                        "description": "A list of clients",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "firstName": {
                                        "type": "string"
                                    },
                                    "lastName": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "birthdate": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "age": {
                                        "type": "integer"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "type": "string"
                                    },
                                    "profileImage": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/public/clients/{id}": {
            "get": {
                "tags": ["Clients"],
                "summary": "Get user by ID",
                "description": "Retrieve details of a user by their ID.",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Error retrieving user"
                    }
                }
            }
        },
        "/v1/public/auth/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Authenticate a user",
                "description": "This endpoint authenticates a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "credentials",
                        "description": "User credentials for authentication",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/v1/public/clients/{userId}": {
            "put": {
                "tags": ["Clients"],
                "summary": "Update user credentials",
                "description": "This endpoint updates user credentials.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID of the user to update"
                    },
                    {
                        "in": "formData",
                        "name": "first_name",
                        "type": "string",
                        "description": "First name of the user"
                    },
                    {
                        "in": "formData",
                        "name": "last_name",
                        "type": "string",
                        "description": "Last name of the user"
                    },
                    {
                        "in": "formData",
                        "name": "profile_image",
                        "type": "file",
                        "description": "Profile image of the user"
                    },
                    {
                        "in": "formData",
                        "name": "address",
                        "type": "string",
                        "description": "Address of the user"
                    },
                    {
                        "in": "formData",
                        "name": "phone_number",
                        "type": "string",
                        "description": "Phone number of the user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User credentials updated successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/v1/internal/agents": {
            "post": {
                "tags": ["Agents"],
                "summary": "Create a new agent",
                "description": "Endpoint to create a new agent",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Agent object that needs to be added",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/Agent"
                    }
                }
                ],
                "responses": {
                "200": {
                    "description": "Agent created successfully"
                },
                "400": {
                    "description": "Invalid input"
                }
                }
            },
            "get": {
                "tags": ["Agents"],
                "summary": "Get all agents",
                "description": "Endpoint to get all agents",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "A list of agents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Agent"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving agents"
                    }
                }
            }
        },
        "/v1/internal/agents/{id}": {
            "get": {
                "tags": ["Agents"],
                "summary": "Get agent by ID",
                "description": "Retrieve details of an agent by their ID.",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the agent to retrieve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Agent"
                        }
                    },
                    "404": {
                        "description": "Agent not found"
                    },
                    "500": {
                        "description": "Error retrieving agent"
                    }
                }
            }
        },
        "/v1/internal/agents/contracts/{id}": {
            "get": {
                "tags": ["Contracts"],
                "summary": "Get contracts by agent or affiliate ID",
                "description": "Endpoint to get contracts by agent or affiliate ID",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "ID of the agent or affiliate"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of contracts for the specified agent or affiliate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Contract"
                            }
                        }
                    },
                    "404": {
                        "description": "No contracts found for this agent or affiliate"
                    },
                    "500": {
                        "description": "Error retrieving contracts"
                    }
                }
            }
        },
        "/v1/internal/affiliates/create": {
            "post": {
                "tags": ["Affiliates"],
                "summary": "Create a new affiliate",
                "description": "Endpoint to create a new affiliate",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Affiliate object that needs to be added",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/Affiliate"
                    }
                }
                ],
                "responses": {
                "200": {
                    "description": "Affiliate created successfully"
                },
                "400": {
                    "description": "Invalid input"
                }
            }
            }
        },
        "/v1/internal/affiliates": {
            "get": {
                "tags": ["Affiliates"],
                "summary": "Get all affiliates",
                "description": "Endpoint to get all affiliates",
                "produces": ["application/json"],
                "responses": {
                "200": {
                    "description": "A list of affiliates",
                    "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Affiliate"
                    }
                    }
                },
                "500": {
                    "description": "Error retrieving affiliates"
                }
                }
            }
        },

        "/v1/internal/insurance-objects": {
            "post": {
                "tags": ["InsuranceObjects"],
                "summary": "Create a new insurance object",
                "description": "Endpoint to create a new insurance object",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "InsuranceObject object that needs to be added",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/InsuranceObject"
                    }
                }
                ],
                "responses": {
                "201": {
                    "description": "InsuranceObject created successfully"
                },
                "400": {
                    "description": "Invalid input"
                }
                }
            },
            "get": {
                "tags": ["InsuranceObjects"],
                "summary": "Get all insurance objects",
                "description": "Endpoint to get all insurance objects",
                "produces": ["application/json"],
                "responses": {
                "200": {
                    "description": "A list of insurance objects",
                    "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InsuranceObject"
                    }
                    }
                },
                "500": {
                    "description": "Error retrieving insurance objects"
                }
                }
            }
        },
        "/v1/internal/insurance-risks": {
            "post": {
                "tags": ["InsuranceRisks"],
                "summary": "Create a new insurance risk",
                "description": "Endpoint to create a new insurance risk",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "InsuranceRisk object that needs to be added",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/InsuranceRisk"
                    }
                }
                ],
                "responses": {
                "201": {
                    "description": "InsuranceRisk created successfully"
                },
                "400": {
                    "description": "Invalid input"
                }
                }
            },
            "get": {
                "tags": ["InsuranceRisks"],
                "summary": "Get all insurance risks",
                "description": "Endpoint to get all insurance risks",
                "produces": ["application/json"],
                "responses": {
                "200": {
                    "description": "A list of insurance risks",
                    "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InsuranceRisk"
                    }
                    }
                },
                "500": {
                    "description": "Error retrieving insurance risks"
                }
                }
            }
        },
        "/v1/internal/insurance-risks/{id}": {
            "get": {
                "tags": ["InsuranceRisks"],
                "summary": "Get insurance risks by insurance object ID",
                "description": "Endpoint to get insurance risks by insurance object ID",
                "produces": ["application/json"],
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "ID of the insurance object"
                }
                ],
                "responses": {
                "200": {
                    "description": "A list of insurance risks for the specified insurance object",
                    "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InsuranceRisk"
                    }
                    }
                },
                "404": {
                    "description": "No risks found for this insurance object"
                },
                "500": {
                    "description": "Error retrieving insurance risks"
                }
                }
            }
        },
        "/v1/public/contracts": {
            "post": {
                "tags": ["Contracts"],
                "summary": "Create a new contract",
                "description": "Endpoint to create a new contract",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Contract object that needs to be added",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/Contract"
                    }
                }
                ],
                "responses": {
                "201": {
                    "description": "Contract created successfully"
                },
                "400": {
                    "description": "Invalid input"
                }
                }
            },
            "get": {
                "tags": ["Contracts"],
                "summary": "Get all contracts",
                "description": "Endpoint to get all contracts",
                "produces": ["application/json"],
                "responses": {
                "200": {
                    "description": "A list of contracts",
                    "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contract"
                    }
                    }
                },
                "500": {
                    "description": "Error retrieving contracts"
                }
                }
            }
        },
        "/v1/public/contracts/{id}": {
            "get": {
            "tags": ["Contracts"],
            "summary": "Get contract by ID",
            "description": "Endpoint to get a contract by its ID",
            "produces": ["application/json"],
            "parameters": [
                {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "string",
                "description": "ID of the contract"
                }
            ],
            "responses": {
                "200": {
                "description": "Contract retrieved successfully",
                "schema": {
                    "$ref": "#/definitions/Contract"
                }
                },
                "404": {
                "description": "Contract not found"
                },
                "500": {
                "description": "Error retrieving contract"
                }
            }
            }
        },
        "/v1/public/contracts/user/{id}": {
            "get": {
            "tags": ["Contracts"],
            "summary": "Get contracts by user ID",
            "description": "Endpoint to get contracts by user ID",
            "produces": ["application/json"],
            "parameters": [
            {
                "name": "id",
                "in": "path",
                "required": true,
            "type": "string",
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contracts for the specified user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract"
              }
            }
          },
          "404": {
            "description": "No contracts found for this user"
          },
          "500": {
            "description": "Error retrieving contracts"
          }
        }
      },
      "put": {
        "tags": ["Contracts"],
        "summary": "Sign a contract",
        "description": "Endpoint to sign a contract",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract signed successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Contract not found"
          }
        }
      },
      "delete": {
        "tags": ["Contracts"],
        "summary": "Delete a contract",
        "description": "Endpoint to delete a contract",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract deleted successfully"
          },
          "404": {
            "description": "Contract not found"
          },
          "500": {
            "description": "Error deleting contract"
          }
        }
      }
    },
    "/v1/public/policies": {
        "post": {
        "tags": ["Policies"],
        "summary": "Create a new policy",
        "description": "Endpoint to create a new policy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
            {
            "in": "body",
            "name": "body",
            "description": "Policy object that needs to be added",
            "required": true,
            "schema": {
                "$ref": "#/definitions/Policy"
            }
            }
        ],
        "responses": {
            "201": {
            "description": "Policy created successfully"
            },
            "400": {
            "description": "Invalid input"
            }
        }
        },
        "get": {
        "tags": ["Policies"],
        "summary": "Get all policies",
        "description": "Endpoint to get all policies",
        "produces": ["application/json"],
        "responses": {
            "200": {
            "description": "A list of policies",
            "schema": {
                "type": "array",
                "items": {
                "$ref": "#/definitions/Policy"
                }
            }
            },
            "500": {
            "description": "Error retrieving policies"
            }
        }
        }
    }
    },
    "definitions": {
        "Policy": {
            "type": "object",
            "required": ["agent", "contract", "insuranceSum", "price", "startDate", "endDate"],
            "properties": {
                "agent": {
                    "type": "string",
                    "format": "ObjectId"
                },
                "contract": {
                    "type": "string",
                    "format": "ObjectId"
                },
                "insuranceSum": {
                    "type": "number"
                },
                "price": {
                    "type": "number"
                },
                "startDate": {
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "Contract": {
            "type": "object",
            "required": ["client", "affiliate", "insuranceObject", "insuranceRisks"],
            "properties": {
                "status": {
                "type": "string",
                "enum": ["CREATED", "CONFIRMED", "COMPLETED"]
                },
                "client": {
                "type": "string",
                "format": "ObjectId"
                },
                "affiliate": {
                "type": "string",
                "format": "ObjectId"
                },
                "insuranceObject": {
                "type": "string",
                "format": "ObjectId"
                },
                "insuranceRisks": {
                "type": "array",
                "items": {
                    "type": "string",
                    "format": "ObjectId"
                }
                }
            }
        },
        "Client": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "email",
                "birthdate",
                "password",
                "re_password"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "birthdate": {
                    "type": "string",
                    "format": "date"
                },
                "password": {
                    "type": "string",
                    "format": "password"
                },
                "re_password": {
                    "type": "string",
                    "format": "password"
                }
            }
        },
        "AuthCredentials": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "format": "password"
                }
            }
        },
        "Affiliate": {
            "type": "object",
            "required": [
                "name",
                "address"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "Agent": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "email",
                "birthdate",
                "password",
                "re_password",
                "tarrif_rate",
                "salary",
                "affiliate_name"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "birthdate": {
                    "type": "string",
                    "format": "date"
                },
                "password": {
                    "type": "string",
                    "format": "password"
                },
                "re_password": {
                    "type": "string",
                    "format": "password"
                },
                "tarrif_rate": {
                    "type": "number"
                },
                "salary": {
                    "type": "number"
                },
                "affiliate_name": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "profile_image": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "InsuranceObject": {
        "type": "object",
        "required": ["insuranceType", "name", "description"],
        "properties": {
            "insuranceType": {
            "type": "string",
            "enum": ["MEDICAL", "AUTO", "TRAVEL", "BUSINESS"]
            },
            "name": {
            "type": "string"
            },
            "description": {
            "type": "string"
            }
        }
        },
        "InsuranceRisk": {
        "type": "object",
        "required": ["insuranceObject", "name"],
        "properties": {
            "insuranceObject": {
            "type": "string",
            "format": "ObjectId"
            },
            "name": {
            "type": "string"
            }
        }
    }
    }
}